{"version":3,"sources":["node_modules/regenerator-runtime/runtime.js","index.js"],"names":["regeneratorRuntime","require","video","document","querySelector","canvas","ctx","getContext","faceCanvas","faceCtx","faceDetector","window","FaceDetector","optionsInputs","querySelectorAll","options","SIZE","SCALE","handleOption","event","currentTarget","value","name","parseFloat","forEach","input","addEventListener","populateVideo","navigator","mediaDevices","getUserMedia","width","height","stream","srcObject","play","console","log","videoWidth","videoHeight","detect","faces","drawFace","censor","face","boundingBox","top","left","clearRect","strokeStyle","lineWidth","strokeRect","imageSmoothingEnabled","drawImage","x","y","then"],"mappings":";AAAA;AACA;AACA;ACFA,ADGA,ICHMA,kBAAkB,GAAGC,OAAO,CAAC,qBAAD,CAAlC;ADIA;ACHA,ADIA,ICJMC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CAAd;AACA,ADIA,ICJMC,MAAM,GAAGF,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,ADIA,ICJME,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAZ;AACA,ADIA,ICJMC,UAAU,GAAGL,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAnB;AACA,ADIA,ICJMK,OAAO,GAAGD,UAAU,CAACD,UAAX,CAAsB,IAAtB,CAAhB;AACA,ADIA,ICJMG,YAAY,GAAG,IAAIC,MAAM,CAACC,YAAX,EAArB,EAEA;ADGA;ACFA,ADGA,ICHMC,aAAa,GAAGV,QAAQ,CAACW,gBAAT,CAA0B,+BAA1B,CAAtB;AAEA,ADEA,ICFMC,OAAO,GAAG;AACZC,ADEJ,ECFIA,IAAI,EAAE,CADM;AAEZC,ADEJ,ECFIA,KAAK,EAAE;AAFK,ADKhB,CCLA;ADMA;ACDA,ADEA,SCFSC,YAAT,CAAsBC,KAAtB,EAA6B;AACzB,ADEJ,6BCF4BA,KAAK,CAACC,aAA9B;AAAA,ADGJ,MCHYC,KAAR,wBAAQA,KAAR;AAAA,ADIJ,MCJmBC,IAAf,wBAAeA,IAAf;AACAP,ADIJ,ECJIA,OAAO,CAACO,IAAD,CAAP,GAAgBC,UAAU,CAACF,KAAD,CAA1B;AACH,ADID;AACA;ACHAR,ADIA,aCJa,CAACW,OAAd,CAAsB,UAAAC,KAAK;AAAA,ADK3B,SCL+BA,KAAK,CAACC,gBAAN,CAAuB,OAAvB,EAAgCR,YAAhC,CAAJ;AAAA,ADM3B,CCNA,GAEA;ADKA;AACA,SCLeS;ADMf;AACA,ECUA;ADTA;AACA;AACA;AACA,2ECXA;AAAA,ADYA;ACZA,ADaA;ACbA,ADcA;ACdA,ADeA;ACfA,ADgBA;AChBA,ADiBA;ACjBA,ADkBA,mBCjByBC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AACrD,ADiBR;AACA;ACjBQ,ADkBR;ACjBQ5B,ADkBR,cClBQA,KAAK,EAAE;AAAE6B,ADmBjB,gBCnBiBA,KAAK,EAAE,GAAT;AAAcC,ADoB7B,gBCpB6BA,MAAM,EAAE;AAAtB,ADqBf;ACxB6D,ADyB7D,aCzByB,CADzB;AD2BA;AC3BA,AD4BA;AC3BUC,AD4BV,YC5BUA,MADV;AAMI/B,ADwBJ,YCxBIA,KAAK,CAACgC,SAAN,GAAkBD,MAAlB;AANJ,AD+BA;AC/BA,ADgCA,mBCzBU/B,KAAK,CAACiC,IAAN,EAPV;ADiCA;ACjCA,ADkCA;ACzBI,AD0BJ;ACzBIC,AD0BJ,YC1BIA,OAAO,CAACC,GAAR,CAAYnC,KAAK,CAACoC,UAAlB,EAA8BpC,KAAK,CAACqC,WAApC;AACAlC,AD0BJ,YC1BIA,MAAM,CAAC0B,KAAP,GAAe7B,KAAK,CAACoC,UAArB;AACAjC,AD0BJ,YC1BIA,MAAM,CAAC2B,MAAP,GAAgB9B,KAAK,CAACqC,WAAtB;AACA/B,AD0BJ,YC1BIA,UAAU,CAACuB,KAAX,GAAmB7B,KAAK,CAACoC,UAAzB;AACA9B,AD0BJ,YC1BIA,UAAU,CAACwB,MAAX,GAAoB9B,KAAK,CAACqC,WAA1B;AD2BJ;ACzCA,AD0CA;AC1CA,AD2CA;AC3CA,AD4CA;AC5CA,AD6CA;AC7CA,AD8CA;AC9CA,AD+CA;AC/CA,ADgDA;AACA;AACA;AACA;AACA,SClCeC;ADmCf;AACA;AACA;AACA;AACA,oECvCA;AAAA,ADwCA;ACxCA,ADyCA;ACzCA,AD0CA;AC1CA,AD2CA;AC3CA,AD4CA;AC5CA,AD6CA;AC7CA,AD8CA,mBC7CwB9B,YAAY,CAAC8B,MAAb,CAAoBtC,KAApB,CADxB;AD+CA;AC/CA,ADgDA;AC/CUuC,ADgDV,YChDUA,KADV;AAEIA,ADgDJ,YChDIA,KAAK,CAACjB,OAAN,CAAckB,QAAd;AACAD,ADgDJ,YChDIA,KAAK,CAACjB,OAAN,CAAcmB,MAAd,EAHJ,CAII;AACA,AD+CJ;AACA;AC/CI,ADgDJ;AACA;ACvDA,ADwDA;ACxDA,ADyDA;ACzDA,AD0DA;AC1DA,AD2DA;AC3DA,AD4DA;AC5DA,AD6DA;AC7DA,AD8DA;AACA;AACA;AACA;AC1DC,AD2DD,ECzDA;AD0DA;ACzDA,AD0DA,SC1DSD,QAAT,CAAkBE,IAAlB,EAAwB;AACpB,AD0DJ,0BC1DyCA,IAAI,CAACC,WAA1C;AAAA,AD2DJ,MC3DYd,KAAR,qBAAQA,KAAR;AAAA,AD4DJ,MC5DmBC,MAAf,qBAAeA,MAAf;AAAA,AD6DJ,MC7D2Bc,GAAvB,qBAAuBA,GAAvB;AAAA,AD8DJ,MC9DgCC,IAA5B,qBAA4BA,IAA5B;AACAzC,AD8DJ,EC9DIA,GAAG,CAAC0C,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB3C,MAAM,CAAC0B,KAA3B,EAAkC1B,MAAM,CAAC2B,MAAzC;AACA1B,AD8DJ,EC9DIA,GAAG,CAAC2C,WAAJ,GAAkB,SAAlB;AACA3C,AD8DJ,EC9DIA,GAAG,CAAC4C,SAAJ,GAAgB,CAAhB;AACA5C,AD8DJ,EC9DIA,GAAG,CAAC6C,UAAJ,CAAeJ,IAAf,EAAqBD,GAArB,EAA0Bf,KAA1B,EAAiCC,MAAjC;AACH,AD8DD,EC5DA;AD6DA;AACA;AC7DA,AD8DA,SC9DSW,MAAT,OAAuC;AAAA,AD+DvC,MC/D+BC,IAAQ,QAArBC,WAAqB;AACnCpC,AD+DJ,EC/DIA,OAAO,CAAC2C,qBAAR,GAAgC,KAAhC;AACA3C,AD+DJ,EC/DIA,OAAO,CAACuC,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBxC,UAAU,CAACuB,KAAnC,EAA0CvB,UAAU,CAACwB,MAArD,EAFmC,CAInC;AD8DJ;AC7DIvB,AD8DJ,EC9DIA,OAAO,CAAC4C,SAAR,EACI;AACAnD,AD6DR,EC7DQA,KAFJ,EAEW;AACP0C,AD6DR,EC7DQA,IAAI,CAACU,CAHT,EAGY;AACRV,AD6DR,EC7DQA,IAAI,CAACW,CAJT,EAKIX,IAAI,CAACb,KALT,EAKgB;AACZa,AD4DR,EC5DQA,IAAI,CAACZ,MANT,EAOI;AACAY,AD2DR,EC3DQA,IAAI,CAACU,CART,EAQY;AACRV,AD2DR,EC3DQA,IAAI,CAACW,CATT,EAUIxC,OAAO,CAACC,IAVZ,EAUkB;AACdD,AD0DR,EC1DQA,OAAO,CAACC,IAXZ,CAWkB;AAXlB,ADsEJ,IC3EuC,CAmBnC;ADyDJ;ACxDI,ADyDJ,MCzDUe,KAAK,GAAGa,IAAI,CAACb,KAAL,GAAahB,OAAO,CAACE,KAAnC;AACA,ADyDJ,MCzDUe,MAAM,GAAGY,IAAI,CAACZ,MAAL,GAAcjB,OAAO,CAACE,KAArC;AAEAR,ADwDJ,ECxDIA,OAAO,CAAC4C,SAAR,CACI7C,UADJ,EACgB;AACZoC,ADuDR,ECvDQA,IAAI,CAACU,CAFT,EAGIV,IAAI,CAACW,CAHT,EAIIxC,OAAO,CAACC,IAJZ,EAKID,OAAO,CAACC,IALZ,EAMI;AACA4B,ADmDR,ECnDQA,IAAI,CAACU,CAAL,GAAS,CAACvB,KAAK,GAAGa,IAAI,CAACZ,MAAd,IAAwB,CAPrC,EAQIY,IAAI,CAACW,CAAL,GAAS,CAACvB,MAAM,GAAGY,IAAI,CAACZ,MAAf,IAAyB,CARtC,EASID,KATJ,EAUIC,MAVJ;AAYH,AD+CD;AACA;AC9CAL,AD+CA,aC/Ca,GAAG6B,IAAhB,CAAqBhB,MAArB;ADgfile":"module-10-01-face-detection.e31bb0bc.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","const regeneratorRuntime = require(\"regenerator-runtime\");\nconst video = document.querySelector('.webcam');\nconst canvas = document.querySelector('.video');\nconst ctx = canvas.getContext('2d');\nconst faceCanvas = document.querySelector('.face');\nconst faceCtx = faceCanvas.getContext('2d');\nconst faceDetector = new window.FaceDetector();\n\n// input controls (for pixel amount and scaling of reput image)\nconst optionsInputs = document.querySelectorAll('.controls input[type=\"range\"]');\n\nconst options = {\n    SIZE: 6,\n    SCALE: 1.5,\n};\n\nfunction handleOption(event) {\n    const { value, name } = event.currentTarget;\n    options[name] = parseFloat(value);\n}\n\noptionsInputs.forEach(input => input.addEventListener('input', handleOption));\n\n// populate user's video\nasync function populateVideo() {\n    const stream = await navigator.mediaDevices.getUserMedia({\n        /* video: { width: 1280, height: 720 }, */\n        /* video: { width: 640, height: 320 }, */\n        video: { width: 840, height: 480 },\n    });\n    video.srcObject = stream;\n    await video.play();\n\n    // size the canvases to be the same as the video\n    console.log(video.videoWidth, video.videoHeight);\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    faceCanvas.width = video.videoWidth;\n    faceCanvas.height = video.videoHeight;\n}\n\n// face detection\nasync function detect() {\n    const faces = await faceDetector.detect(video);\n    faces.forEach(drawFace);\n    faces.forEach(censor);\n    // ask the browser when the next animation frame is\n    // tell it to run detect for us\n    /* requestAnimationFrame(detect); */\n};\n\n// draw face \"styles\"\nfunction drawFace(face) {\n    const { width, height, top, left } = face.boundingBox;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.strokeStyle = '#ffc600';\n    ctx.lineWidth = 2;\n    ctx.strokeRect(left, top, width, height);\n}\n\n// draw small face, and draw again but scaled up\nfunction censor({ boundingBox: face }) {\n    faceCtx.imageSmoothingEnabled = false;\n    faceCtx.clearRect(0, 0, faceCanvas.width, faceCanvas.height);\n\n    // draw the small face\n    faceCtx.drawImage(\n        // 5 source arguments\n        video, // where does the source come from\n        face.x, // where do we start the source pull from\n        face.y,\n        face.width, // width and height from source pull (the square)\n        face.height,\n        // 4 draw arguments\n        face.x, // where should we start drawing\n        face.y,\n        options.SIZE, // small image width\n        options.SIZE, // small image height\n    );\n\n    // draw the small face back on, but scale up\n    const width = face.width * options.SCALE;\n    const height = face.height * options.SCALE;\n\n    faceCtx.drawImage(\n        faceCanvas, // source from itself\n        face.x,\n        face.y,\n        options.SIZE,\n        options.SIZE,\n        // drawing arguments\n        face.x - (width - face.height) / 2,\n        face.y - (height - face.height) / 2,\n        width,\n        height,\n    );\n}\n\npopulateVideo().then(detect);"]}